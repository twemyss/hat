#![feature(proc_macro_hygiene, decl_macro)]

#[macro_use] extern crate rocket;
extern crate rocket_contrib;
extern crate rand;
extern crate ux;
#[macro_use] extern crate serde;

#[cfg(test)] mod tests;
mod codes;
mod optotypes;

use rocket_contrib::templates::Template;
use std::collections::HashMap;
use rocket::http::RawStr;
use rocket_contrib::serve::StaticFiles;
use std::str::FromStr;

use crate::optotypes::OptotypeArrangement;
use crate::codes::{short::ShortCode, long::LongCode};

#[get("/")]
fn index() -> Template {
    Template::render("index", HashMap::<String, String>::new())
}

/// If the user attempts to access the answer form without specifying the code, then simply
/// display the form into which they can enter the code.
#[get("/answers")]
fn code_form() -> Template {
    let context = HashMap::<String, String>::new();
    Template::render("code-form", context)
}

/// Display a (not to scale) answer sheet for any given code.
#[get("/answers?<code>")]
fn answer_display(code: &RawStr) -> Template {

    // Define some HashMaps to store the template context generated by attempting to parse the code
    let mut error_messages = HashMap::<String, String>::new();
    let mut context = HashMap::<String, OptotypeArrangement>::new();

    // Attempt to parse the code using the length as an indicator of what type of code it is
    match code.to_string().replace("-", "").len() {
        6 => {
            match ShortCode::from_str(&code.to_string()) {
                Ok(parsed_code) => { context.insert("arrangement".to_string(), OptotypeArrangement::from(parsed_code)); },
                Err(e) => { error_messages.insert("error".to_string(), format!("{}", e)); }
            };
        },
        16 => {
            match LongCode::from_str(&code.to_string()) {
                Ok(parsed_code) => { context.insert("arrangement".to_string(), OptotypeArrangement::from(parsed_code)); },
                Err(e) => { error_messages.insert("error".to_string(), format!("{}", e)); }
            };
        },
        _ => { error_messages.insert("error".to_string(), "Error: Invalid code length.".to_string()); }
    }   

    // Display errors if there were any, if not, display the optotypes
    if error_messages.len() > 0 {
        Template::render("code-form", error_messages)
    } else {
        Template::render("answers", context)
    }
}

fn rocket() -> rocket::Rocket {
    return rocket::ignite()
        .attach(Template::fairing())
        .mount("/", routes![index, code_form, answer_display])
        .mount("/static", StaticFiles::from("static/"));
} 

fn main() {
    // Start the web server
    rocket().launch();
}
